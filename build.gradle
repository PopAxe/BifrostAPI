buildscript{
    ext { springBootVersion = '3.1.2' }
    dependencies {
          classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
	id 'java'
	id 'application'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
}

group = 'dev.gtech.bifrost'
version = '1.0.0'

application {
	mainClass = "dev.gtech.bifrost.bifrostapi.${System.getenv("ENTRYPOINT")}"
}

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client:3.1.3'
	implementation 'org.springframework.boot:spring-boot-starter-security:3.1.3'
	implementation 'org.springframework.boot:spring-boot-starter-web:3.1.3'
	implementation 'org.springframework.session:spring-session-data-mongodb:3.0.3'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb:3.1.3'
	implementation 'software.amazon.awssdk:cloudfront:2.20.124'
	implementation 'com.amazonaws.serverless:aws-serverless-java-container-springboot3:2.0.0-M2'
	implementation 'com.amazonaws:aws-lambda-java-core:1.2.3'
	implementation 'com.amazonaws:aws-lambda-java-events:3.11.2'
	runtimeOnly 'com.amazonaws:aws-lambda-java-log4j2:1.5.1'
	implementation 'org.apache.commons:commons-lang3'
	implementation 'software.amazon.awssdk:secretsmanager:2.20.125'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
	useJUnitPlatform()
}

task buildZip(type: Zip) {
   // set the base name of the zip file
   from compileJava
   from processResources
   into('lib') {
      from configurations.runtimeClasspath
   }
}

def certFileName = "selfsigned.jks"
def certFilePath = "./certs/$certFileName"
task createSelfSignedCert() {
	doLast {
		exec {
			workingDir "./certs"
			ignoreExitValue true
			executable "${System.getenv("JAVA_HOME")}/bin/keytool"
			args "-delete -noprompt -alias bifrostapicert".split(" ")
			args "-keypass selfcert -storepass selfcert -keystore $certFileName".split(" ")
		}
		exec {
			workingDir "./certs"
			executable "${System.getenv("JAVA_HOME")}/bin/keytool"
			args "-genkey -noprompt -trustcacerts -keyalg RSA -keysize 2048 -alias bifrostapicert -dname".split(" ")
			args "CN=localhost, O=Gregory Technical Services, L=Nashville, ST=TN, C=US"
			args "-keypass selfcert -storepass selfcert -keystore $certFileName".split(" ")
		}
	}
}

bootRun {
	
    args += [
		"--server.port=8443",
		"--server.ssl.enabled=true",
		"--server.ssl.key-store-type=JKS",
		"--server.ssl.key-store=$certFilePath",
		"--server.ssl.key-store-password=selfcert",
		"server.ssl.key-alias=bifrostapicert",
	]
}

bootRun.dependsOn createSelfSignedCert
build.dependsOn buildZip
